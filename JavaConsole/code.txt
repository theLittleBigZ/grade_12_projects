MENU

/*
 * Names: Vipneet, Gawshan, Zeeshan
 * Date: April 9th, 2018
 * Title: Menu
 * Description: This is the arcade menu for our assignment
 * 
 * FILEIO: FileIO is used in this menu to display banners at the beginning. The txt file is read and displayed
 */
package prjJavaGame;
import java.io.*;
import java.util.*;

/**
 * @author 348930199
 *
 */
public class menu {
	/**
	 * @param args
	 * @throws InterruptedException 
	 * @throws IOException 
	 */
	public static void main(String[] args) throws InterruptedException, IOException {
		// TODO Auto-generated method stub
		gameMenu(); //run the game menu function
	}
	
	static void gameMenu() throws IOException, InterruptedException {		
		prjJavaGame.cdTicTacToe.clearScreen();
		Scanner scan = new Scanner(System.in); //create a scanner
		
		FileReader fr = new FileReader("menu/menu1.txt"); //create a file reader
		BufferedReader reader = new BufferedReader(fr); //create a buffered reader
		
		String line = ""; //create an empty string
		
		while (line != null) //do the following while the line isn't empty
		{
			line = reader.readLine(); //read the line
			if (line != null) //if the line isn't empty do the following
			{
				System.out.println(line); //print the line variable which is read from the text file
				Thread.sleep(400); //wait
			}
		}
		
		System.out.println("\n\n\n"); //print 3 new lines
		
		fr = new FileReader("menu/menu2.txt"); //new file reader for different file
		reader = new BufferedReader(fr); //new buffered reader for different file
		
		line = ""; //reinitialize line variable to blank
		
		while (line != null) //while line isn't blank
		{
			line = reader.readLine(); //read line from file
			if (line != null) //if line isn't empty
			{
				System.out.println(line); //print line from file
				Thread.sleep(725); //wait
			}
		}
		
		reader.close(); //close the reader
		
		System.out.println("Please choose a game from our arcade below!"); //give options
		
		System.out.println("\n\nPress 1 to play Tic Tac Toe.");
		System.out.println("Press 2 to play a number guessing game.");
		System.out.println("Press 3 to play Wanderer: An Adventure Game.");
		System.out.println("Type exit to exit the arcade.");
		
		String chooseGame = scan.nextLine(); //get user input to play a game
		
		if (chooseGame.equalsIgnoreCase("1")) //if user enters 1, clear the screen and play the tic tac toe game
		{
			prjJavaGame.cdTicTacToe.clearScreen();
			prjJavaGame.cdTicTacToe.ticTacToe();
		}
		else if (chooseGame.equalsIgnoreCase("2")) //if user enters 2, clear the screen and play the random number game
		{
			prjJavaGame.cdTicTacToe.clearScreen();
			prjJavaGame.cdRandomGame.start();
		}
		else if (chooseGame.equalsIgnoreCase("3")) //if the user enters 3, clear the screen and play the adventure game
		{
			prjJavaGame.cdTicTacToe.clearScreen();
			prjJavaGame.cdWanderer.wander();
		}
		else if (chooseGame.equalsIgnoreCase("exit"))
			System.exit(0);
		else
			System.out.println("Sorry invalid key");
		
		gameMenu(); //rerun the function. This is used after the user exits one of the games to rerun the menu
		scan.close(); //close scanner
	}
}


Tic Tac Toe

/*
 * Names: Vipneet, Gawshan, Zeeshan
 * Date: April 9th, 2018
 * Title: Tic Tac Toe
 * Description: This is the tic tac toe game for our assignment
 * 
 * FILEIO: FileIO was used to read in the banner file to display the Tic Tac Toe animation at the beginning.
 * 2D ARRAY: A 2D Array was used to create the tic tac toe playing field (3x3 squares).
 */
package prjJavaGame;
import java.util.*;
import java.io.*;

/**
 * @author 348930199
 *
 */
public class cdTicTacToe {

	/*******************************
	 ************VARIABLES**********
	 ******************************/
	static final boolean USING_ECLIPSE = false;
	static final Scanner scan = new Scanner(System.in);
	static String[][] board = {{" "," "," "}, {" "," "," "}, {" "," "," "}};
	static Random r = new Random();
	static String rows = "    1   2   3";
	static String divider = "  -------------";
	static String rowA = "a | " + board[0][0] + " | " + board[0][1] + " | " + board[0][2] + " |";
	static String rowB = "b | " + board[1][0] + " | " + board[1][1] + " | " + board[1][2] + " |";
	static String rowC = "c | " + board[2][0] + " | " + board[2][1] + " | " + board[2][2] + " |";
	static String userSelection = "";
	static boolean playerWin = false;
	static boolean AIWin = false;
	static int cpu = 0;
	static int x = 0;
	static int y = 0;
	static boolean player1Win = false;
	static boolean player2Win = false;
	static String name = "";
	static String name1 = "";
	static String name2 = "";
	
	/**
	 * @param args
	 * @throws InterruptedException 
	 * @throws IOException 
	 */
	public static void ticTacToe() throws InterruptedException, IOException { //this is no longer a main function because it is called from the arcade menu as another function and you cannot have two mains
		// TODO Auto-generated method stub
		menu(); //call the menu function to run the rest of the game
	}
	
	static void menu() throws InterruptedException, IOException //the menu function which is used to run the game
	{		
		try {
			FileReader fr = new FileReader("TTT/banner.txt"); //create a filereader to read the file with the banner
			BufferedReader reader = new BufferedReader(fr); //create a bufferedreader to efficiently read the file
			
			String line = ""; //create an empty string which is used to hold the line from the file
			
			/*******************************
			 ***********REPETITION**********
			 ******************************/
			while (line != null) //run the following if line is not blank
			{
				line = reader.readLine(); //read the line in the file
				if (line != null) //print the line if it isn't blank
				{
					System.out.println(line); //print the line
					Thread.sleep(500); //wait 0.5 seconds
				}
			}
			
			reader.close(); //close the reader
			
		} catch (IOException e) {
			System.out.println(e); //print the error if one occurs
		}

		System.out.println("\nWelcome! As usual, the game will be played on a 3x3 grid."); //print the line
		Thread.sleep(500); //wait half a second
		System.out.println("Each square in the grid will correspond to a coordinate as shown:\n"); //print the line
		Thread.sleep(500); //wait half a second
		
		updateBoard(); //run the update board function
		printBoard(); //run the print the board function
		
		Thread.sleep(500); //wait half second
		System.out.println("\nYou will use the coordinates to play your move."); //print the line
		Thread.sleep(500); //wait half second
		System.out.println("There is a twist however, if you select a square that is already taken, you will be informed, but you will lose your turn!"); //print the line
		Thread.sleep(500); //wait half second
		System.out.println("\nEnter 1 to play 1 player"); //print the line
		Thread.sleep(500); //wait half second
		System.out.println("Enter 2 to play 2 player"); //print the line
		Thread.sleep(500); //wait half second
		System.out.println("Enter exit to go to menu"); //print the line
		
		String checkGame = scan.nextLine(); //read user input
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		if (checkGame.equalsIgnoreCase("1"))
			singlePlayer(); //run single player game if user enters 1
		else if (checkGame.equalsIgnoreCase("2"))
			twoPlayer(); //run 2 player game if user enters 2
		else if (checkGame.equalsIgnoreCase("exit")) 
			System.out.println("Exiting...."); //go back to menu if user enters exit
	}
	
	static void twoPlayer() throws InterruptedException, IOException //the 2 player game function
	{
		System.out.println("\nEnter your name player 1 (You will play as 'X'): "); //print line
		name1 = scan.nextLine(); //get name from user
		
		System.out.println("\nEnter your name player 2 (You will play as 'O'): "); //print line
		name2 = scan.nextLine(); //get name from user
		
		/*******************************
		 ***********REPETITION**********
		 ******************************/
		while (player1Win == false && player2Win == false) { //run the following functions to play the game only if the winner flags are false
			player1Selection(); //run the player1 selection function
			clearScreen(); //clear screen
			updateBoard(); //update board
			printBoard(); //print board
			checkMultiWinner(); //check if anyone won
			if (player1Win == true || player2Win == true) //if the following occurs, break out of the loop
				break;
			checkMultiCatsGame(); //check if it's a cat's game
			player2Selection(); //get player 2's selection
			clearScreen(); //clear screen
			updateBoard(); //update board
			printBoard(); //print board
			checkMultiWinner(); //check if anyone won
			if (player1Win == true || player2Win == true) //if the following occurs, break out of the loop
				break;
			checkMultiCatsGame(); //check cat's game
		}
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		if (player1Win == true) //run the following if player 1 won
		{
			System.out.println("\nCongratulations " + name1 + "!!! You won!!!");
			System.out.println("\nSorry " + name2 + ", you lost.");
			System.out.println("\nPress 1 to go back to the menu.");
			
			clearBoard(); //clear board
			
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user enters 1
			{	
				player1Win = false; //reset variables
				player2Win = false;
				clearScreen(); //clear screen
				menu(); //run the menu again to play game again
			}
			else
				System.out.println("I guess you don't want to go to the menu. See you next time.");
		}
		else if (player2Win == true) //check if player 2 won
		{
			System.out.println("\nCongratulations " + name2 + "!!! You won!!!");
			System.out.println("\nSorry " + name1 + ", you lost.");
			System.out.println("\nPress 1 to go back to the menu.");
	
			clearBoard(); //clear board
	
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user enters 1
			{
				player1Win = false; //reset variables
				player2Win = false;
				clearScreen(); //clear screen
				menu(); //run menu again to play again
			}
			else
				System.out.println("I guess you don't want to go to the menu. See you next time.");
		}
	}
	
	static void player1Selection() { //function to get player 1's input in the 2 player game
		System.out.println("\n\n\n\nEnter a coordinate (a1, b3, etc) " + name1 + ".");
		
		userSelection = scan.nextLine(); //get user's coordinate
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine which square the user wants to 
		//place their piece on and if that square is empty. If it is empty, they place their
		//piece. If not, they are notified and their turn is skipped
		if (userSelection.equalsIgnoreCase("a1") && board[0][0] == " ")
			board[0][0] = "X";
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] == " ")
			board[0][1] = "X";
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] == " ")
			board[0][2] = "X";
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] == " ")
			board[1][0] = "X";
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] == " ")
			board[1][1] = "X";
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] == " ")
			board[1][2] = "X";
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] == " ")
			board[2][0] = "X";
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] == " ")
			board[2][1] = "X";
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] == " ")
			board[2][2] = "X";
		else if (userSelection.equalsIgnoreCase("a1") && board[0][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else
			System.out.println("Sorry that is not a square on the board.");
	}
	
	static void player2Selection() { //function to get player 2's input in the 2 player game
		System.out.println("\n\n\n\nEnter a coordinate (a1, b3, etc) " + name2 + ".");
		
		userSelection = scan.nextLine(); //get player 2's coordinate
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine which square the user wants to 
		//place their piece on and if that square is empty. If it is empty, they place their
		//piece. If not, they are notified and their turn is skipped
		if (userSelection.equalsIgnoreCase("a1") && board[0][0] == " ")
			board[0][0] = "O";
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] == " ")
			board[0][1] = "O";
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] == " ")
			board[0][2] = "O";
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] == " ")
			board[1][0] = "O";
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] == " ")
			board[1][1] = "O";
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] == " ")
			board[1][2] = "O";
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] == " ")
			board[2][0] = "O";
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] == " ")
			board[2][1] = "O";
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] == " ")
			board[2][2] = "O";
		else if (userSelection.equalsIgnoreCase("a1") && board[0][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else
			System.out.println("Sorry that is not a square on the board.");
	}
	
	static void checkMultiCatsGame() throws InterruptedException, IOException { //function to check if it is a cat's game in 2 player
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following if statement is used to determine if all the squares are full
		if (board[0][0] != " " && board[0][1] != " " && board[0][2] != " " && board[1][0] != " " && board[1][1] != " " && board[1][2] != " " && board[2][0] != " " && board[2][1] != " " && board[2][2] != " ")
		{
			System.out.println("\nSorry, it's a cat's game.");
			System.out.println("\nPress 1 to go back to the menu.");
			
			clearBoard(); //clear board
			
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user enters 1
			{	
				player1Win = false; //reset variables
				player2Win = false;
				clearScreen(); //clear screen
				menu(); //menu to play again
			}
		}
	}
	
	static void checkMultiWinner() { //function to check if either of the 2 players have won
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine if the player's have won
		//all 8 winning combinations are checked to determine if either player won
		if (board[0][0] == "X" && board[0][1] == "X" && board[0][2] == "X")
			player1Win = true;
		else if (board[1][0] == "X" && board[1][1] == "X" && board[1][2] == "X")
			player1Win = true;
		else if (board[2][0] == "X" && board[2][1] == "X" && board[2][2] == "X")
			player1Win = true;
		else if (board[0][0] == "X" && board[1][0] == "X" && board[2][0] == "X")
			player1Win = true;
		else if (board[0][1] == "X" && board[1][1] == "X" && board[2][1] == "X")
			player1Win = true;
		else if (board[0][2] == "X" && board[1][2] == "X" && board[2][2] == "X")
			player1Win = true;
		else if (board[0][0] == "X" && board[1][1] == "X" && board[2][2] == "X")
			player1Win = true;
		else if (board[0][2] == "X" && board[1][1] == "X" && board[2][0] == "X")
			player1Win = true;
		else if (board[0][0] == "O" && board[0][1] == "O" && board[0][2] == "O")
			player2Win = true;
		else if (board[1][0] == "O" && board[1][1] == "O" && board[1][2] == "O")
			player2Win = true;
		else if (board[2][0] == "O" && board[2][1] == "O" && board[2][2] == "O")
			player2Win = true;
		else if (board[0][0] == "O" && board[1][0] == "O" && board[2][0] == "O")
			player2Win = true;
		else if (board[0][1] == "O" && board[1][1] == "O" && board[2][1] == "O")
			player2Win = true;
		else if (board[0][2] == "O" && board[1][2] == "O" && board[2][2] == "O")
			player2Win = true;
		else if (board[0][0] == "O" && board[1][1] == "O" && board[2][2] == "O")
			playerWin = true;
		else if (board[0][2] == "O" && board[1][1] == "O" && board[2][0] == "O")
			player2Win = true;
	}
	
	static void singlePlayer() throws InterruptedException, IOException //function to run the single player game against an AI
	{	
		System.out.println("\nEnter your name (You will play as 'X'): ");
		name = scan.nextLine(); //get user's name
		
		/******************************
		 ***********REPETITON**********
		 ******************************/
		while (playerWin == false && AIWin == false) { //run the following code if the winner flags are false
			userSelection(); //user seletion function
			clearScreen(); //clear screen
			updateBoard(); //update board
			playerWin = checkSingleWinnerPlayer(); //assign the value of the variable to the returned value to the function to check if the user won
			AIWin = checkSingleWinnerAI(); //assign the value of the variable to the returned value to the function to check if the AI won
			if (playerWin == true || AIWin == true) //if either are true then do the following code
			{
				printBoard(); //print board
				break; //break out of loop
			}
			checkSingleCatsGame(); //check if its a cat's game
			AISelection(); //run the AIselection function 
			updateBoard(); //update the board
			printBoard(); //print the board
			playerWin = checkSingleWinnerPlayer(); //assign the value of the variable to the returned value to the function to check if the user won
			AIWin = checkSingleWinnerAI(); //assign the value of the variable to the returned value to the function to check if the AI won
			if (playerWin == true || AIWin == true) //if either are true then do the following code
				break; //break the loop
			checkSingleCatsGame(); //check if its a cat's game
		}
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		if (playerWin == true)
		{
			System.out.println("\nCongratulations " + name + "!!! You won!!!");
			System.out.println("\nPress 1 to go back to the menu.");
			
			clearBoard(); //clear board
			
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user enters 1
			{	
				playerWin = false; //reset variables
				AIWin = false;
				clearScreen(); //clear screen
				menu(); //run menu to play again
			}
			else
				System.out.println("I guess you don't want to go to the menu. See you next time.");
		}
		else if (AIWin == true)
		{
			System.out.println("\nSorry " + name + ", you lost.");
			System.out.println("\nPress 1 to go back to the menu.");
	
			clearBoard(); //clear board
	
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user enters 1
			{
				playerWin = false; //reset variables
				AIWin = false;
				clearScreen(); //clear screen
				menu(); //run menu to play again
			}
			else
				System.out.println("I guess you don't want to go to the menu. See you next time.");
		}
	}
	
	static void clearBoard() { //function to clear the board when the user wants to play again
		board[0][0] = " ";
		board[0][1] = " ";
		board[0][2] = " ";
		board[1][0] = " ";
		board[1][1] = " ";
		board[1][2] = " ";
		board[2][0] = " ";
		board[2][1] = " ";
		board[2][2] = " ";
	}
	
	static void userSelection() throws InterruptedException { //function to get player 2's input in the 2 player game
		System.out.println("Enter a coordinate (a1, b3, etc) " + name + ".");
		
		userSelection = scan.nextLine(); //get user's coordinate
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine which square the user wants to 
		//place their piece on and if that square is empty. If it is empty, they place their
		//piece. If not, they are notified and their turn is skipped
		if (userSelection.equalsIgnoreCase("a1") && board[0][0] == " ")
			board[0][0] = "X";
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] == " ")
			board[0][1] = "X";
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] == " ")
			board[0][2] = "X";
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] == " ")
			board[1][0] = "X";
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] == " ")
			board[1][1] = "X";
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] == " ")
			board[1][2] = "X";
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] == " ")
			board[2][0] = "X";
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] == " ")
			board[2][1] = "X";
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] == " ")
			board[2][2] = "X";
		else if (userSelection.equalsIgnoreCase("a1") && board[0][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a2") && board[0][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("a3") && board[0][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b1") && board[1][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b2") && board[1][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("b3") && board[1][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c1") && board[2][0] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c2") && board[2][1] != " ")
			System.out.println("Sorry, that square is already taken.");
		else if (userSelection.equalsIgnoreCase("c3") && board[2][2] != " ")
			System.out.println("Sorry, that square is already taken.");
		else
		{
			System.out.println("Sorry that is not a square on the board.");
			Thread.sleep(3000); //wait 3 seconds
		}
	}
	
	static void checkSingleCatsGame() throws InterruptedException, IOException { //function to check if it's a cat's game in single player
		
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following if statement is used to determine if all the squares are full
		if (board[0][0] != " " && board[0][1] != " " && board[0][2] != " " && board[1][0] != " " && board[1][1] != " " && board[1][2] != " " && board[2][0] != " " && board[2][1] != " " && board[2][2] != " ")
		{
			System.out.println("\nSorry, it's a cat's game.");
			System.out.println("\nPress 1 to go back to the menu.");
			
			clearBoard(); //clear board
			
			if (scan.nextLine().equalsIgnoreCase("1")) //check if user entered 1
			{	
				playerWin = false; //reset variables
				AIWin = false;
				clearScreen(); //clear screen
				menu(); //go to menu to play again
			}
		}
	}
	
	/*******************************
	 **FUNCTION WITH RETURN VALUE***
	 ******************************/
	static boolean checkSingleWinnerPlayer() { //the value returned is a boolean used to identify if the user won or not
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine if the player has won
		//all 8 winning combinations are checked to determine if the player won
		if (board[0][0] == "X" && board[0][1] == "X" && board[0][2] == "X")
			return true; //return true if user won
		else if (board[1][0] == "X" && board[1][1] == "X" && board[1][2] == "X")
			return true;
		else if (board[2][0] == "X" && board[2][1] == "X" && board[2][2] == "X")
			return true;
		else if (board[0][0] == "X" && board[1][0] == "X" && board[2][0] == "X")
			return true;
		else if (board[0][1] == "X" && board[1][1] == "X" && board[2][1] == "X")
			return true;
		else if (board[0][2] == "X" && board[1][2] == "X" && board[2][2] == "X")
			return true;
		else if (board[0][0] == "X" && board[1][1] == "X" && board[2][2] == "X")
			return true;
		else if (board[0][2] == "X" && board[1][1] == "X" && board[2][0] == "X")
			return true;
		
		return false; //return false if none of the above are true
	}
	
	/*******************************
	 **FUNCTION WITH RETURN VALUE***
	 ******************************/
	static boolean checkSingleWinnerAI() { //the value returned is a boolean used to identify if the AI won or not
		/*******************************
		 ***********SELECTION**********
		 ******************************/
		//the following selection block is used to determine if the AI has won
		//all 8 winning combinations are checked to determine if the Ai won
		if (board[0][0] == "O" && board[0][1] == "O" && board[0][2] == "O")
			return true; //return true if AI won
		else if (board[1][0] == "O" && board[1][1] == "O" && board[1][2] == "O")
			return true;
		else if (board[2][0] == "O" && board[2][1] == "O" && board[2][2] == "O")
			return true;
		else if (board[0][0] == "O" && board[1][0] == "O" && board[2][0] == "O")
			return true;
		else if (board[0][1] == "O" && board[1][1] == "O" && board[2][1] == "O")
			return true;
		else if (board[0][2] == "O" && board[1][2] == "O" && board[2][2] == "O")
			return true;
		else if (board[0][0] == "O" && board[1][1] == "O" && board[2][2] == "O")
			return true;
		else if (board[0][2] == "O" && board[1][1] == "O" && board[2][0] == "O")
			return true;
		
		return false; //return false if none of the above are true
	}
	
	static void AISelection() {	//function to allow the AI to select a square. If it selects one that is already take, it will choose a new one
		x = r.nextInt(3); //create random numbers corresponding to coordinate of grid
		y = r.nextInt(3);
		
		if (board[x][y] != " ") //RECURSIVE FUNCTION - if the selected space is not empty then run the function again
			AISelection();
		else 
			board[x][y] = "O"; //if it is empty it will place an O in the square
		
		updateBoard(); //update board
	}
	
	static void updateBoard(){ //function that will update the board after each selection to ensure that pieces are being placed after each turn. Without this function, the board remains blank because it is not updated
		 rowA = "a | " + board[0][0] + " | " + board[0][1] + " | " + board[0][2] + " |";
		 rowB = "b | " + board[1][0] + " | " + board[1][1] + " | " + board[1][2] + " |";
		 rowC = "c | " + board[2][0] + " | " + board[2][1] + " | " + board[2][2] + " |";
		}
	
	static void printBoard() throws InterruptedException { //function to print the board with short delays in between each line for effect
		System.out.println(rows); //print line
		Thread.sleep(200); //wait 
		System.out.println(divider); //print line
		Thread.sleep(200); //wait
		System.out.println(rowA); //print line
		Thread.sleep(200); //wait
		System.out.println(divider); //print line
		Thread.sleep(200); //wait
		System.out.println(rowB); //print line
		Thread.sleep(200); //wait 
		System.out.println(divider); //print line
		Thread.sleep(200); //wait
		System.out.println(rowC); //print line
	}
	
	static void clearScreen() { //Clears the console
		if (USING_ECLIPSE) //If using the Eclipse IDE
			//It's more of a workaround since it only simulates a "clear" screen
			for (int i = 0; i < 50; ++i) System.out.println(); //Add 50 \n
		else {
			//This stuff doesn't work with the console inside eclipse only in an actual console
			final String os = System.getProperty("os.name"); //gets the os name (hopefully windows)
	        if (os.contains("Windows")) //if it's windows
				try {
					new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor(); //run the cmd command cls to clear the console screen
				} catch (InterruptedException e) {} catch (IOException e) {}
			else
				try {
					Runtime.getRuntime().exec("clear"); //runs the clear command for any os that is not windows
				} catch (IOException e) {}
		}
	}
}


Number game

/*
 * Names: Vipneet, Gawshan, Zeeshan
 * Date: April 9th, 2018
 * Title: Random number game
 * Description: This is the random number game for our assignment
 * 
 * NO FILEIO OR 2D ARRAYS ARE USED
 */
package prjJavaGame;
import java.util.*;

/**
 * @author 340760115
 *
 */
public class cdRandomGame {

	/*
	 * @param args
	 */
	
	/*******************************
	 ************VARIABLES**********
	 ******************************/
	static Scanner scan = new Scanner(System.in); 
	//Remember that EQUALS USES A STRING
	static String Banner = ""; 
	static Random rand = new Random(); 
	static int number = rand.nextInt(100-1) + 1;
	static boolean win = false; 
	static int[] guesses = new int[11]; //SINGLE D ARRAY
	static int tries = 0;
	static String in = "";
	
	public static void start() {
		// TODO Auto-generated method stub
		menu(); //run the menu function
	}
	public static void menu(){ //this function creates the menu for the user to play the game
		System.out.println("----------------------------"); //print the line
		System.out.println("Welcome to....");
		System.out.println("Guess The Number "); 
		System.out.println("----------------------------");
		System.out.println("enter 'start' to play \nenter 'exit' to quit to menu");
		
		in = scan.nextLine();  //get user input
			
		if(in.equalsIgnoreCase("start")){ //check if user enters start
			game();
		}else if(in.equalsIgnoreCase("exit")){ //if user enters exit it will go back to main menu
			
		}else{
			System.out.println("invalid key try again"); //if user enters anything else, they will be notified and the function will run again
			menu(); 
		}
	}
	public static void game(){ //the function to run the game
		prjJavaGame.cdTicTacToe.clearScreen(); //clear screen
		System.out.println("Guess a number between 1 and 100"); //print line
		while(tries < 10 && !win){ //gives user only ten tries 
			in = scan.nextLine();//gets user input 
			int guess = Integer.parseInt(in);// gets the number 
			if(guess > number){
				guesses[tries] = guess;//saves guess
				System.out.println("the number is lower");
			}
			else if(guess < number){
				guesses[tries] = guess;
				System.out.println("the number is higher");
			}
			else if(guess == number){
				guesses[tries] = guess; 
				System.out.println("You win after " + (tries + 1) + " Guess");//tells user number of ties
				/*prints out guess*/
				System.out.println("Your guesses were ");
				for (int i = 0; i < guesses.length; i++) {
					if(guesses[i] != 0){
						System.out.print(guesses[i] + " ");
					}
				}
				//tells game user has won
				win = true; 
			}
			tries++; 
		}
		//menu again
		System.out.println("\nenter 'exit' to exit or 'start' to play again"); //print line
		in = scan.nextLine(); //get input
		if(in.equalsIgnoreCase("start")){ //check if user enters start
			win = false; //reset variable
			game(); //run game
		}else if(in.equalsIgnoreCase("exit")){ //check if user enters exit to go to main menu
			
		}else{
			System.out.println("invalid key try again"); //if user enters invalid key go to menu
			menu(); 
		}
	}
}


Wanderer

/*
 * Names: Vipneet, Gawshan, Zeeshan
 * Date: April 9th, 2018
 * Title: Wanderer
 * Description: This is the wanderer game for our assignment
 * 
 * FileIO: 
	-is used to reading all the ascii art and display them 
	-it is also used to write the scores to a csv file

	2D arrays:
	-are used to manage the game board 
 */
package prjJavaGame;
import java.io.*;
import java.util.*;

/**
 * @author Zeeshan
 *
 */
public class cdWanderer {
	/**
	 * @param args
	 * @throws InterruptedException
	 */
	static final boolean USING_ECLIPSE = false;
	static FileReader fr; //creates the file reader
	static BufferedReader br; //creates the buffered reader
	static Random rand = new Random(); //creates the random object 
	static Scanner scan = new Scanner(System.in);// creates the scanner
	static String userName = "";// creates the user name var 
	/*
	 * 2d array
	 * 
	 */
	static char[][] level = new char[10][20];// creates an empty level
	static String userPos = "";//creates var to store users position   
	static int health = 50; //sets starting health
	static boolean win = false; //sets win to false 
	static boolean lose = false; //sets lose to false
	
	public static void wander() throws InterruptedException {
		// TODO Auto-generated method stub
		splash(); //runs splash screen
		menu();//runs menu
	}
	/************** USED TO CLEAR SCREEN (below)*****************************/
	/*
	 * functions
	 * 
	 */
	static void clrScreen() { //Clears the console
		if (USING_ECLIPSE) //If using the Eclipse IDE
			//It's more of a workaround since it only simulates a "clear" screen
			for (int i = 0; i < 50; ++i) System.out.println(); //Add 50 \n
		else {
			//This stuff doesn't work with the console inside eclipse only in an actual console
			final String os = System.getProperty("os.name");
	        if (os.contains("Windows"))
				try {
					new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
				} catch (InterruptedException e) {} catch (IOException e) {}
			else
				try {
					Runtime.getRuntime().exec("clear");
				} catch (IOException e) {}
		}
	}
	/************** USED TO show splash screen (below)*****************************/
	static void splash() throws InterruptedException {
		try {
			/*
			 * fileIO
			 * 
			 */
			fr = new FileReader("assets/title.txt"); //reads in the splash screen
			br = new BufferedReader(fr);//sets up buffered reader
			String line = " ";//creates a temp var to hold read in lines 
			/*
			 * Repetition
			 * 
			 */
			do {
				line = br.readLine(); //sets line to each line of the file one by one
				if (line != null) {//checks if line is null
					System.out.println(line);// if not the displays it 
					Thread.sleep(330);//and pauses for effect 
				}
			} while (line != null);
			br.close();//closes the buffered reader
			fr.close();//closes the file
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/************** USED TO display menu (below)*****************************/
	static void menu() throws InterruptedException {
		/*displays options for user*/
		System.out.println("1) Play");
		System.out.println("2) How To Play");
		System.out.println("3) Credits/Info");
		System.out.println("4) Scores");
		System.out.println("5) Exit");
		/*
		 * input
		 * 
		 */
		String in = scan.nextLine();//reads user input 
		
		/*Checks user input an activates appropriate function*/
		if (in.equalsIgnoreCase("1")) {
			clrScreen(); //clears screen
			postPlay();//starts post game

		} else if (in.equalsIgnoreCase("2")) {
			clrScreen();
			howTo(); //starts how to 
		} else if (in.equalsIgnoreCase("3")) {
			clrScreen();
			info(); //starts info
		} else if (in.equalsIgnoreCase("4")) {
			clrScreen(); 
			leaderBoard();
		} else if (in.equalsIgnoreCase("5")) {
		}
		else {
			/*tells user that command is invalid and to try again*/
			System.out.println("Invalid Command");
			Thread.sleep(500); //pauses for affect 
			clrScreen(); // clears screen
			menu();//runs menu with in menu (example of recursive functions) 
		}
	}
	/************** USED TO show scores(below)*****************************/
	static void leaderBoard(){
		try {
			fr = new FileReader("assets/highScore.csv");
			br = new BufferedReader(fr);
			String line = " ";
			do{
				line = br.readLine();
				if(line != null){
					System.out.println(line);
				}
			}while(line != null);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("enter any key to exit the menu");
		if(!scan.nextLine().equals(null)){ //scans to see line is not null
			try {
				menu();//goes to menu
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
	}
	
	/************** USED TO show the how to screen(below)*****************************/
	static void howTo(){
		/*Describes the game*/
		System.out.println("Wanderer is a roguelike game");
		System.out.println("to play a user must use W[up] A[left] S[down] D[right]");
		System.out.println("move until you get to the exit, there are 9 placed in random spots on the map");
		System.out.println("along the way there are decisions that you'll have to make. Use yes (Y) and no (N) to do so");
		System.out.println("enter any key to exit the menu");
		if(!scan.nextLine().equals(null)){ //scans to see line is not null
			try {
				menu();//goes to menu
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
	}
	
	/************** USED TO show the info screen(below)*****************************/
	static void info(){
		/*prints who made it*/
		System.out.println("Made by Zeeshan, Gawshan, & Vipneet");
		System.out.println("press any key to exit");
		if(!scan.nextLine().equals(null)){
			try {
				menu();//goes to menu
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
	}
	
	/************** USED TO get users name and to display ascii art version of users name(below)*****************************/
	static void postPlay() throws InterruptedException {
		System.out.println("Enter Your Name");//asks for user name
		userName = scan.nextLine();//reads it and stores it
		userName = userName.replaceAll("\\d", "");//removes numbers from userName var
		userName = userName.replaceAll(" ", "");//removes spaces from userName var
		/*
		 * single array
		 * 
		 */
		String[] letter = userName.split("(?!^)");//splits @ each character 
		String file = " ";//creates var file to store file needed
		System.out.println("Welcome");//welcomes users 
		for (int i = 0; i < letter.length; i++) {
			file = "letters" + '/' + letter[i] + ".txt"; //sets var to file need for each letter
			try {
				fr = new FileReader(file);//reads in that letter file 
				br = new BufferedReader(fr);//opens it with buffered reader
				String line = " ";//creates temp var 
				do {
					line = br.readLine();//reads in letter file 
					if (line != null) {//checks if line is null
						System.out.println(line);//prints line
						Thread.sleep(60);//pauses screen
					}
				} while (line != null);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("Let's Begin");
		levelGen();
	}
	
	/************** USED TO generates a random level(below)*****************************/
	static void levelGen(){
		/*
		 * X -> 
		 * O ->
		 * H ->
		 */
		String line = "";//creates temp var 
		int count = 0;// creates counter var 
		
		try {
			fr = new FileReader("assets/level.txt");//loads level file
			br = new BufferedReader(fr);//open file in buffered reader
			do{
				line = br.readLine(); //reads lines in to temp var 
				if(line != null){
					int length = line.length();//gets length of each line 
					for (int i = 0; i < length; i++) {
						//System.out.println(line.charAt(i));
						level[count][i] = line.charAt(i); //converts txt file into an array 
					}
				}
				count++;
			}while(line != null);
			fr.close();//closes file reader
			br.close();// closes buffered reader
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*place user in random location*/
		int playerX = rand.nextInt(8)+1;
		int playerY = rand.nextInt(7)+1; 
		level[playerX][playerY] = 'H';
		/*places the 13 end points in random locations*/
		for (int i = 0; i < 13; i++) {
			int endX = rand.nextInt(8)+1;
			int endY = rand.nextInt(8)+1;
			level[endX][endY] = '*';
		}
		/*generates the random level*/
		for (int i = 0; i < level.length; i++) {
			for (int j = 0; j < level[i].length; j++) {
				if(Character.toString(level[i][j]).equals(" ")){
					int tile = rand.nextInt(10);
					if(tile < 3){
						level[i][j] = 'O'; 
					}
					else if(tile > 3 && tile < 7){
						level[i][j] = 'M';
					}
					else{
						level[i][j] = '#';
					}
				}
			}
		}
		clrScreen(); 
		demolvl();
	}
	/*prints the array replacing all characters with ? Expect the player for an added challenge */
	static void demolvl(){
		for (int i = 0; i < level.length; i++) {
			for (int j = 0; j < level[i].length; j++) {
				if(level[i][j] == 'H'){//if char is equal to the hero 
					System.out.print(level[i][j]);
					userPos = i + "," + j; //save hero -> player position to var
				}else if(level[i][j] == 'x'){
					System.out.print(level[i][j]);
				}else if(level[i][j] == ' '){
					System.out.print(level[i][j]);
				}
				else{
					System.out.print("?");
				}
			}
			System.out.print("\n");
		}
		play();
	}
	
	/************** USED TO get users input for direction(below)*****************************/
	static void play(){
		String dir = scan.nextLine(); //get direction user is going
		String[] postion = userPos.split(","); 
		int X = Integer.parseInt(postion[0]); //set var to users current x 
		int Y = Integer.parseInt(postion[1]); //set var to users current y
		char tile = ' '; //temp var for possible tiles 
		/*if statment for all posible directions a user could go*/
		if(dir.equalsIgnoreCase("w")){
			X--; 
			tile = level[X][Y]; //gets tile in position user wants to go 
			displayChar(tile);//displays that "obstacle" 
			updateBoard(X,Y); //updates the board 
		}else if(dir.equalsIgnoreCase("a")){
			Y--; 
			tile = level[X][Y]; 
			displayChar(tile);
			updateBoard(X,Y);
		}else if(dir.equalsIgnoreCase("s")){
			X++; 
			tile = level[X][Y]; 
			displayChar(tile);
			updateBoard(X,Y);
		}else if(dir.equalsIgnoreCase("d")){
			Y++; 
			tile = level[X][Y]; 
			displayChar(tile);
			updateBoard(X,Y);
		}else{
			System.out.println("Invalid Key try again");
			play();
		}
	}
	
	/************** USED TO display tile user has fallen on(below) the parameter used is the tile they have fallen on*****************************/
	static void displayChar(char tile){ 
		String line = " ";//creates temp var
		if(tile == 'O'){
			try {
				fr = new FileReader("assets/whole.txt");//reads in charter txt
				br = new BufferedReader(fr);//passes it to the buffered redaer
				do{
					line = br.readLine();//saves red line
					if(line != null){
						System.out.println(line);//if line is not null print it 
					}	
				}while(line != null);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			event('O');//lunches event for that charcter
		}
		else if(tile == 'M'){
			try {
				fr = new FileReader("assets/mana.txt");
				br = new BufferedReader(fr);
				do{
					line = br.readLine();
					if(line != null){
						System.out.println(line);
					}	
				}while(line != null);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			event('M');
		}
		else if(tile == '#'){
			try {
				fr = new FileReader("assets/floor.txt");
				br = new BufferedReader(fr);
				do{
					line = br.readLine();
					if(line != null){
						System.out.println(line);
					}	
				}while(line != null);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			event('#');
		}
		else if(tile == '*'){
			win(); //if end point is reached player wins 
		}
		/*if wall is reached tells player to go another direction*/
		else if(tile == 'x'){
			System.out.println("You reached an impassable wall, go another direction!");
			play(); 
		}
		else if(tile == ' '){
			System.out.println("you've been here before");
		}
		else{
			/*other wise a critical error has occurred*/
			System.out.println("critical system error!");
			System.out.println(tile);
		}
	}
	
	/************** USED TO tell the story/set chances of event(below) the parameter used is the tile the character has landed on*****************************/
	static void event(char tile){
		int chance; //creates chance var to hold random number
		String YN = " "; //var to hold users decision   
		if(tile == 'O'){
			/*prints a bit of a story*/
			System.out.println("You found a hole, will you look inside? (Y/N)");
			/*reads users input*/
			YN = scan.nextLine(); 
			if(YN.equalsIgnoreCase("y")){
				YN = "Y"; 
			}else if(YN.equalsIgnoreCase("n")){
				YN = "N"; 
			}else{//if user enters invalid response will tell user and set it to yes 
				System.out.println("what you entered is wrong so we chose for you");
				YN = "Y"; 
			}
			if(YN == "Y"){//if user input was yes
				chance = rand.nextInt(100);//set chance to random for 0-100
				/*below is story for both a good and bad situation*/
				if(chance < 40){// 40% bad 
					System.out.println("You want inside a wild Mahaksh's home!");
					System.out.println("You lost 30 health");
					health -= 30; 
					System.out.println("your health is: " + health);
					if(health <= 0){
						lose();//if health is less then zero you lose 
					}	
				}else if(chance > 40 && chance < 50){//10% Instant death
					System.out.println("A raged Vipneet found you");
					lose(); 
				}
				else{//50% good 
					System.out.println("You want inside a civilized Mahaksh's home!");
					System.out.println("You gained 10 health");
					health += 10; 
					System.out.println("your health is: " + health);
				}
			}
		}else if(tile == 'M'){
			System.out.println("You found some Mana, will you take it? (Y/N)");
			YN = scan.nextLine(); 
			if(YN.equalsIgnoreCase("y")){
				System.out.println("You chose Yes (Y)");
				YN = "Y"; 
			}else if(YN.equalsIgnoreCase("n")){
				System.out.println("You chose No (N)");
				YN = "N"; 
			}else{
				System.out.println("what you entered is wrong so we chose for you");
				YN = "Y";
			}
			if(YN == "Y"){
				chance = rand.nextInt(100);
				if(chance < 51){
					System.out.println("the Mana was made by Owen");
					System.out.println("you lost 5 health");
					health -= 5; 
					System.out.println("your health is: " + health);
					if(health <= 0){
						lose(); 
					}
				}else if(chance > 60 && chance < 70){
					System.out.println("A raged Vipneet found you");
					System.out.println("You Lost");
					lose(); 
				}
				else{
					System.out.println("the Mana was made by Nelaven");
					System.out.println("you gained 90 health");
					health += 90; 
					System.out.println("your health is: " + health);
				}
			}
		}else if(tile == '#'){
			System.out.println("You found a mat, will you look under it? (Y/N)");
			YN = scan.nextLine(); 
			if(YN.equalsIgnoreCase("y")){
				System.out.println("You chose Yes (Y)");
				YN = "Y"; 
			}else if(YN.equalsIgnoreCase("n")){
				System.out.println("You chose No (N)");
				YN = "N"; 
			}else{
				System.out.println("what you entered is wrong so we chose for you");
				YN = "Y";
			}
			if(YN == "Y"){
				chance = rand.nextInt(100);
				if(chance < 51){
					System.out.println("the mat belongs to Kevin");
					System.out.println("you lost 10 health");
					health -= 10; 
					System.out.println("your health is: " + health);
					if(health <= 0){
						lose(); 
					}
				}else if(chance > 60 && chance < 70){
					System.out.println("A raged Vipneet found you");
					System.out.println("You Lost");
					lose(); 
				}
				else{
					System.out.println("the mat belongs to Jatin");
					System.out.println("you gained 10 health");
					health += 10;
					System.out.println("your health is: " + health);
				}
			}
		}
	}
	
	/************** USED TO update board with new user positions(below) the parameters used are coordinates to map user's movement*****************************/
	static void updateBoard(int x,int y){
		 String[] pos = userPos.split(",");//gets users position 
		 int nowX = Integer.parseInt(pos[0]); //set user X 
		 int nowY = Integer.parseInt(pos[1]); //sets user Y
		 level[x][y] = level[nowX][nowY]; // moves user
		 level[nowX][nowY] = ' ';//sets previous location to blank
		 userPos = x +"," + y; //updates user position
		 clrScreen();
		 if(!win && !lose){
			 demolvl(); //if user hasn't on or lost display updated board
		 }
	}
	/*win screen*/
	static void win(){
		win = true; 
		try {
			fr = new FileReader("assets/win.txt");
			br = new BufferedReader(fr);
			String line = " ";

			do {
				line = br.readLine();
				if (line != null) {
					System.out.println(line);
				}
			} while (line != null);
			br.close();
			fr.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("\n\n\nYou win! your score is: " + health);
		/*if user wins saves there score */
		try {
			/*
			 * fileIO
			 * 
			 */
			FileWriter fw = new FileWriter("assets/highScore.csv", true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(userName + " " + health + "\r\n");
			bw.close();
			fw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/*lose screen*/
	static void lose(){
		lose = true;
		System.out.println("you lost");
		try {
			fr = new FileReader("assets/lose.txt");
			br = new BufferedReader(fr);
			String line = " ";

			do {
				line = br.readLine();
				if (line != null) {
					System.out.println(line);
				}
			} while (line != null);
			br.close();
			fr.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
